name: Deploy to DreamHost

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.19.0"

      - name: Verify Node Version
        run: node -v

      - name: Install dependencies
        run: npm install

      - name: Build Astro Site
        run: npm run build
        
      - name: Create .htaccess File
        run: |
          # Create .htaccess for static site
          cat > dist/.htaccess << 'EOL'
          # Enable URL rewriting
          RewriteEngine On
          
          # Set the base
          RewriteBase /
          
          # Redirect www to non-www
          RewriteCond %{HTTP_HOST} ^www\.(.*)$ [NC]
          RewriteRule ^(.*)$ https://%1/$1 [R=301,L]
          
          # If the request is for an existing file, directory, or link, serve it directly
          RewriteCond %{REQUEST_FILENAME} -f [OR]
          RewriteCond %{REQUEST_FILENAME} -d [OR]
          RewriteCond %{REQUEST_FILENAME} -l
          RewriteRule ^ - [L]
          
          # For clean URLs - redirect /page to /page/
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteCond %{REQUEST_URI} !(\.[a-zA-Z0-9]{1,5}|/)$
          RewriteRule ^(.*)$ /$1/ [R=301,L]
          
          # If the request is for a non-existent file, serve the index.html in that directory
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule ^([^.]+)/$ $1/index.html [L]
          
          # If the request is for the root, serve index.html
          RewriteRule ^$ index.html [L]
          
          # Custom error pages
          ErrorDocument 404 /404.html
          ErrorDocument 500 /500.html
          
          # Set proper MIME types
          AddType application/javascript .js
          AddType text/css .css
          AddType image/svg+xml .svg
          AddType application/font-woff .woff
          AddType application/font-woff2 .woff2
          AddType application/vnd.ms-fontobject .eot
          AddType application/x-font-ttf .ttf
          
          # Enable CORS for fonts
          <FilesMatch "\.(ttf|otf|eot|woff|woff2)$">
            <IfModule mod_headers.c>
              Header set Access-Control-Allow-Origin "*"
            </IfModule>
          </FilesMatch>
          
          # Enable caching for static assets
          <IfModule mod_expires.c>
            ExpiresActive On
            
            # Images
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/gif "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/webp "access plus 1 year"
            ExpiresByType image/svg+xml "access plus 1 year"
            ExpiresByType image/x-icon "access plus 1 year"
            
            # CSS, JavaScript
            ExpiresByType text/css "access plus 1 month"
            ExpiresByType text/javascript "access plus 1 month"
            ExpiresByType application/javascript "access plus 1 month"
            
            # Fonts
            ExpiresByType application/font-woff "access plus 1 year"
            ExpiresByType application/font-woff2 "access plus 1 year"
            ExpiresByType application/vnd.ms-fontobject "access plus 1 year"
            ExpiresByType application/x-font-ttf "access plus 1 year"
            ExpiresByType font/opentype "access plus 1 year"
          </IfModule>
          
          # Disable directory listing
          Options -Indexes
          
          # Compress text files
          <IfModule mod_deflate.c>
            AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css application/javascript application/json
          </IfModule>
          EOL

      - name: Verify Build Output
        run: |
          echo "Verifying build output..."
          ls -la dist/
          echo "Checking for critical files..."
          
          # Check for the _astro directory which should always be present
          if [ ! -d "dist/_astro" ]; then
            echo "Error: dist/_astro directory is missing!"
            exit 1
          fi
          
          # Check for error pages
          if [ ! -f "dist/404.html" ] || [ ! -f "dist/500.html" ]; then
            echo "Error: Error pages are missing!"
            exit 1
          fi
          
          echo "Build verification completed successfully."
          
      # We'll use a different approach for backups
      # The restore-site.js script can be used for manual restoration if needed

      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@4.3.0
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: dist/
          server-dir: ${{ secrets.FTP_REMOTE_PATH }}
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
          state-name: .ftp-deploy-sync-state.json
          log-level: verbose
