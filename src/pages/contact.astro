---
import Layout from "../layouts/Layout.astro";
---

<Layout
  title="Contact Jeff Scotti | Front End Engineer & UI/UX Designer"
  description="Get in touch with Jeff Scotti, Senior Front End Engineer and UI/UX Designer based in San Diego, CA. Reach out for collaboration, project inquiries, or professional opportunities."
  type="website"
  keywords={[
    "Contact Jeff Scotti",
    "Hire Front End Engineer",
    "UI/UX Designer Contact",
    "Web Developer San Diego",
    "Professional Inquiry",
    "Project Collaboration",
    "Front End Development Services",
    "UI/UX Design Services",
  ]}>
  <div id="main" class="site-main">
    <div id="main-content" class="single-page-content">
      <div id="primary" class="content-area">
        <div class="page-title">
          <h1>Contact</h1>
          <div class="page-subtitle">
            <h4>Get in Touch</h4>
          </div>
        </div>

        <div id="content" class="page-content site-content single-post" role="main">
          <div class="contact-section">
            <!-- Contact Form -->
            <div class="contact-form-container">
              <form id="contact_form" class="contact-form">
                <div class="form-group">
                  <label for="form_name">Full Name</label>
                  <input
                    id="form_name"
                    type="text"
                    name="name"
                    class="form-control"
                    placeholder="e.g., John Smith"
                    required
                  />
                </div>

                <div class="form-group">
                  <label for="form_email">Email</label>
                  <input
                    id="form_email"
                    type="email"
                    name="email"
                    class="form-control"
                    placeholder="e.g., john.smith@example.com"
                    required
                  />
                </div>

                <div class="form-group">
                  <label for="form_message">Message</label>
                  <textarea
                    id="form_message"
                    name="message"
                    class="form-control"
                    placeholder="e.g., I'm interested in discussing a potential project..."
                    rows="7"
                    required>
                  </textarea>
                </div>

                <button type="submit" class="btn" id="submit_btn">Submit</button>
                <div id="form_status" class="form-status" style="display: none;"></div>
              </form>
            </div>

            <!-- Contact Info -->
            <div class="contact-info-container">
              <div class="contact-info">
                <div class="info-list">
                  <div class="info-block">
                    <div class="ci-text">
                      <h4>
                        <span class="ci-icon">
                          <i class="fa-solid fa-location-dot"></i>
                        </span>Location
                      </h4>
                      <p>San Diego, CA</p>
                    </div>
                  </div>

                  <div class="info-block">
                    <div class="ci-text">
                      <h4>
                        <span class="ci-icon">
                          <i class="fa-solid fa-people-arrows"></i>
                        </span>Connect With Me
                      </h4>
                      <div class="social-links">
                        <a href="#" class="social-link" title="LinkedIn">
                          <i class="fab fa-linkedin-in"></i>
                        </a>
                        <a href="#" class="social-link" title="GitHub">
                          <i class="fab fa-github"></i>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Contact section layout */
  .contact-section {
    display: flex;
    flex-wrap: wrap;
    gap: 30px;
  }

  .contact-form-container {
    flex: 1 1 60%;
    min-width: 300px;
    box-sizing: border-box;
  }

  .contact-info-container {
    flex: 1 1 30%;
    min-width: 250px;
  }

  /* Contact info */
  .contact-info {
    background-color: rgba(40, 40, 40, 0.5);
    border-radius: 8px;
    padding: 0 25px 25px 25px;
  }

  /* Info list */
  .info-list {
    margin-bottom: 30px;
  }

  .info-block {
    margin-bottom: 30px;
  }

  .social-links {
    margin-top: 10px;
    padding-left: 30px;
    text-align: left;
    display: flex;
    gap: 10px;
  }

  .social-link {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    background-color: rgba(255, 255, 255, 0.1);
    color: var(--text-color);
    text-align: center;
    font-size: 18px;
    border-radius: 50%;
    transition: all 0.3s ease-in-out;
  }

  .social-link:hover {
    background-color: var(--primary-color);
    color: white;
    transform: translateY(-3px);
  }

  .ci-text h4 {
    display: flex;
    align-items: center;
    font-size: 16px;
    color: var(--heading-color);
    margin: 0 0 5px;
  }

  .ci-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    margin-right: 10px;
    font-size: 18px;
    color: var(--primary-color);
  }

  .ci-text p {
    font-size: 14px;
    color: var(--text-color);
    margin: 0 0 0 35px;
  }

  /* Contact form */
  .contact-form {
    margin-bottom: 30px;
    width: 100%;
    box-sizing: border-box;
  }

  .form-group {
    position: relative;
    margin-bottom: 20px;
    width: 100%;
    box-sizing: border-box;
  }

  /* Form labels */
  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-size: 16px;
    color: var(--heading-color);
    font-weight: 600;
  }

  /* Input and textarea styling */
  .form-control {
    display: block;
    width: 100%;
    box-sizing: border-box;
    border: 2px solid #555;
    border-radius: 5px;
    padding: 10px 25px 10px 12px;
    background: transparent;
    color: white;
    transition: border-color 0.3s ease-in-out;
    font-size: 16px;
    backdrop-filter: blur(5px);
  }

  /* Placeholder styling */
  .form-control::placeholder {
    color: #888;
    opacity: 1;
  }

  /* On focus, change the border color to blue */
  .form-control:focus {
    outline: none;
    border-color: var(--primary-color);
  }

  textarea.form-control {
    height: auto;
    min-height: 150px;
  }

  /* Form status messages */
  .form-status {
    margin-top: 15px;
    padding: 10px 15px;
    border-radius: 5px;
    font-weight: 500;
  }

  .form-status.success {
    background-color: rgba(25, 135, 84, 0.2);
    color: #20c997;
    border: 1px solid rgba(25, 135, 84, 0.4);
  }

  .form-status.error {
    background-color: rgba(220, 53, 69, 0.2);
    color: #ff6b6b;
    border: 1px solid rgba(220, 53, 69, 0.4);
  }

  /* Button disabled state */
  .btn:disabled {
    opacity: 0.65;
    cursor: not-allowed;
  }

  @media (max-width: 768px) {
    .contact-section {
      flex-direction: column;
    }

    .contact-form-container,
    .contact-info-container {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("contact_form") as HTMLFormElement;
    const statusDiv = document.getElementById("form_status") as HTMLDivElement;
    const submitBtn = document.getElementById("submit_btn") as HTMLButtonElement;

    if (!form || !statusDiv || !submitBtn) {
      console.error("Could not find required form elements");
      return;
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      submitBtn.disabled = true;
      submitBtn.textContent = "Sending...";

      statusDiv.style.display = "none";

      const nameInput = form.querySelector('[name="name"]') as HTMLInputElement;
      const emailInput = form.querySelector('[name="email"]') as HTMLInputElement;
      const messageInput = form.querySelector('[name="message"]') as HTMLTextAreaElement;

      // Ensure message is properly trimmed to handle any whitespace issues
      let message = messageInput.value;
      if (message) {
        message = message.trim();
      }

      const formData = {
        name: nameInput.value.trim(),
        email: emailInput.value.trim(),
        message: message,
      };

      try {
        console.log("Sending form data:", JSON.stringify(formData));

        // Use the new API endpoint
        const baseUrl = window.location.origin;
        const apiUrl = `${baseUrl}/api/contact-form`;
        console.log("API URL:", apiUrl);

        // Log request details
        console.log("Request details:", {
          url: apiUrl,
          method: "POST",
          headers: {"Content-Type": "application/json"},
          body: JSON.stringify(formData),
        });

        const response = await fetch(apiUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        });

        console.log("Response status:", response.status, response.statusText);

        // Try to get the raw response text first for debugging
        const responseText = await response.clone().text();
        console.log("Raw response:", responseText);

        // Check if the response is ok before trying to parse JSON
        if (response.ok) {
          try {
            const result = await response.json();
            statusDiv.style.display = "block";
            statusDiv.textContent = "Thank you! Your message has been sent.";
            statusDiv.className = "form-status success";
            form.reset();
          } catch (parseError) {
            console.error("Error parsing JSON:", parseError);
            statusDiv.style.display = "block";
            statusDiv.textContent =
              "Server returned success but with invalid format. Please try again.";
            statusDiv.className = "form-status error";
          }
        } else {
          // Try to parse error response as JSON, but handle case where it's not JSON
          try {
            const errorResult = await response.json();
            statusDiv.style.display = "block";
            statusDiv.textContent = errorResult.error || "Something went wrong. Please try again.";
            statusDiv.className = "form-status error";
          } catch (parseError) {
            // If we can't parse the error as JSON, use the status text
            console.error("Error parsing error response:", parseError);
            statusDiv.style.display = "block";
            statusDiv.textContent = `Error: ${response.status} ${response.statusText}`;
            statusDiv.className = "form-status error";
          }
        }
      } catch (error) {
        console.error("Network Error:", error);
        statusDiv.style.display = "block";
        statusDiv.textContent = "Network error. Please try again later.";
        statusDiv.className = "form-status error";
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = "Submit";
      }
    });
  });
</script>
