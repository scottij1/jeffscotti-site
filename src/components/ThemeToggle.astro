---
// A simple theme toggle component that demonstrates the use of CSS variables for theming
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
  <span class="theme-toggle-icon">
    <i class="fas fa-sun light-icon"></i>
    <i class="fas fa-moon dark-icon"></i>
  </span>
  <span class="theme-toggle-text">Theme</span>
</button>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle");
    const html = document.documentElement;

    // Update icon based on current theme
    updateToggleIcon(html.classList.contains("theme-light") ? "theme-light" : "theme-dark");

    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        const html = document.documentElement;

        // Toggle between dark and light themes
        if (html.classList.contains("theme-light")) {
          html.classList.remove("theme-light");
          html.classList.add("theme-dark");
          saveTheme("theme-dark");
        } else {
          html.classList.remove("theme-dark");
          html.classList.add("theme-light");
          saveTheme("theme-light");
        }
      });
    }

    function saveTheme(theme: string) {
      localStorage.setItem("theme", theme);
      updateToggleIcon(theme);

      // Dispatch a custom event for other components to listen for theme changes
      document.dispatchEvent(new CustomEvent("themeChanged", { detail: { theme } }));
    }

    function updateToggleIcon(theme: string) {
      const lightIcon = document.querySelector<HTMLElement>(".light-icon");
      const darkIcon = document.querySelector<HTMLElement>(".dark-icon");

      if (!lightIcon || !darkIcon) {
        return;
      }

      if (theme === "theme-light") {
        lightIcon.style.display = "none";
        darkIcon.style.display = "inline-block";
      } else {
        lightIcon.style.display = "inline-block";
        darkIcon.style.display = "none";
      }
    }
  });
</script>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    border: none;
    color: var(--heading-color);
    padding: 8px 12px;
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    margin-left: 15px;
    opacity: 0.55;
    font-size: 16px;
    line-height: 50px;
    font-family: var(--font-family);
  }

  .theme-toggle:hover {
    opacity: 1;
  }

  .theme-toggle-icon {
    margin-right: 6px;
    font-size: 16px;
  }

  .theme-toggle-text {
    font-size: 16px;
    font-weight: 500;
  }

  .light-icon {
    display: inline-block;
  }

  .dark-icon {
    display: none;
  }

  /* Theme-specific styles */
  .theme-light .theme-toggle,
  .theme-dark .theme-toggle {
    color: var(--heading-color);
  }

  @media (max-width: 768px) {
    .theme-toggle-text {
      display: none;
    }

    .theme-toggle {
      padding: 8px;
      margin-left: 10px;
    }

    .theme-toggle-icon {
      margin-right: 0;
    }
  }
</style>
