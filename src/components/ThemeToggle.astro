---
// A simple theme toggle component that demonstrates the use of CSS variables for theming
---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
  <span class="theme-toggle-icon">
    <i class="fas fa-sun light-icon"></i>
    <i class="fas fa-moon dark-icon"></i>
  </span>
  <span class="theme-toggle-text">Theme</span>
</button>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle");

    // Check for saved theme preference or use default
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme) {
      document.body.classList.add(savedTheme);
      updateToggleIcon(savedTheme);
    }

    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        const body = document.body;

        // Cycle through themes
        if (body.classList.contains("theme-light")) {
          body.classList.remove("theme-light");
          body.classList.add("theme-dark-blue");
          saveTheme("theme-dark-blue");
        } else if (body.classList.contains("theme-dark-blue")) {
          body.classList.remove("theme-dark-blue");
          body.classList.add("theme-high-contrast");
          saveTheme("theme-high-contrast");
        } else if (body.classList.contains("theme-high-contrast")) {
          body.classList.remove("theme-high-contrast");
          saveTheme("");
        } else {
          body.classList.add("theme-light");
          saveTheme("theme-light");
        }
      });
    }

    function saveTheme(theme: string) {
      localStorage.setItem("theme", theme);
      updateToggleIcon(theme);
    }

    function updateToggleIcon(theme: string) {
      const lightIcon = document.querySelector<HTMLElement>(".light-icon");
      const darkIcon = document.querySelector<HTMLElement>(".dark-icon");

      if (!lightIcon || !darkIcon) {
        return;
      }
      
      if (theme === "theme-light") {
        lightIcon.style.display = "none";
        darkIcon.style.display = "inline-block";
      } else {
        lightIcon.style.display = "inline-block";
        darkIcon.style.display = "none";
      }
    }
  });
</script>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    border: 1px solid var(--border-color);
    color: var(--text-color);
    padding: 8px 12px;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-left: 15px;
  }

  .theme-toggle:hover {
    background-color: var(--primary-color);
    color: #fff;
    border-color: var(--primary-color);
  }

  .theme-toggle-icon {
    margin-right: 6px;
    font-size: 14px;
  }

  .theme-toggle-text {
    font-size: 12px;
    font-weight: 500;
  }

  .light-icon {
    display: inline-block;
  }

  .dark-icon {
    display: none;
  }

  /* Theme-specific styles */
  .theme-light .theme-toggle {
    background-color: rgba(0, 0, 0, 0.05);
  }

  .theme-high-contrast .theme-toggle {
    border-width: 2px;
  }

  @media (max-width: 768px) {
    .theme-toggle-text {
      display: none;
    }

    .theme-toggle {
      padding: 8px;
      margin-left: 10px;
    }

    .theme-toggle-icon {
      margin-right: 0;
    }
  }
</style>
