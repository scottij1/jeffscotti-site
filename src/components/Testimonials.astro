---
import TestimonialItem from "./TestimonialItem.astro";
import {testimonials} from "../data/testimonials";

interface Props {
  title?: string;
  subtitle?: string;
}

const {title = "Testimonials"} = Astro.props;
const testimonialsToShow = testimonials.filter((testimonial) => {
  return testimonial.visible !== false;
});
---

<!-- Preload Owl Carousel CSS -->
<link
  rel="preload"
  href="/styles/owl.carousel.css"
  as="style"
  onload="this.onload=null;this.rel='stylesheet'"
/>
<noscript>
  <link rel="stylesheet" href="/styles/owl.carousel.css" />
</noscript>

<style is:global>
  /* Default widths applied to each testimonial item right away */
  .testimonials > * {
    width: 50%;
    box-sizing: border-box;
  }
  @media (max-width: 768px) {
    .testimonials > * {
      width: 100%;
    }
  }

  /* Critical Owl Carousel layout styles (applied once the carousel is activated) */
  .testimonials.owl-carousel .owl-stage {
    display: flex;
    transition: transform 0.25s ease-in-out;
  }
  .testimonials.owl-carousel .owl-item {
    flex: 0 0 auto;
    width: 50%;
  }
  @media (max-width: 768px) {
    .testimonials.owl-carousel .owl-item {
      width: 100%;
    }
  }

  .read-more-link,
  .show-less-link {
    color: var(--primary-color);
    text-decoration: none;
    cursor: pointer;
    font-weight: 500;
  }

  .read-more-link:hover,
  .show-less-link:hover {
    text-decoration: underline;
  }

  .testimonials-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .testimonial-item {
    padding: 30px;
    margin-bottom: 10px;
  }

  .testimonial-content {
    position: relative;
    padding: 30px 20px 20px 60px;
    background-color: var(--container-bg-color);
    border-radius: var(--border-radius-md);
    border: 2px solid var(--border-color);
    transition: all 0.25s ease-in-out;
  }

  .testimonial-picture {
    position: absolute;
    display: block;
    top: -30px;
    left: -30px;
    width: 80px;
    height: 80px;
  }

  .testimonial-picture img {
    display: inline-block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
    border: 2px solid var(--border-color);
  }

  .testimonial-text p {
    font-style: italic;
    color: var(--text-color);
  }

  .testimonial-author-info {
    margin-top: 15px;
  }

  .testimonial-author {
    margin: 0 0 2px;
    font-size: 0.9em;
    color: var(--heading-color);
  }

  .testimonial-firm {
    margin: 0;
    font-size: 0.8em;
    color: var(--text-color);
    opacity: 0.8;
  }

  .testimonial-icon {
    display: block;
    line-height: 20px;
    font-size: 20px;
    position: absolute;
    left: 20px;
    bottom: 46px;
    color: var(--border-color);
  }

  .testimonial-icon-big {
    display: block;
    line-height: 44px;
    font-size: 44px;
    position: absolute;
    right: -24px;
    bottom: -24px;
    color: var(--border-color);
    opacity: 0.2;
    z-index: -1;
  }

  .testimonials.owl-carousel .owl-dots {
    position: relative;
    width: 100%;
    text-align: center;
  }

  .testimonials.owl-carousel .owl-dot {
    display: inline-block;
    margin: 3px 0;
  }

  .testimonials.owl-carousel .owl-dot span {
    display: block;
    height: 3px;
    background-color: var(--border-color);
    border-radius: 3px;
    margin: 4px;
    width: 20px;
    transition: all 0.25s ease-in-out;
  }

  .testimonials.owl-carousel .owl-dot.active span,
  .testimonials.owl-carousel .owl-dot:hover span {
    background-color: var(--primary-color);
  }

  .testimonials.owl-carousel .owl-dot.active span {
    width: 30px;
  }

  @media (max-width: 768px) {
    .testimonial-content {
      margin-right: 30px;
    }
  }

  /* Optionally hide the carousel container until initialization */
  .pre-carousel-hidden {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
</style>

<div class="testimonials-container">
  <div class="block-title">
    <h2>{title}</h2>
  </div>

  <div
    id="testimonials_1"
    class="testimonials pre-carousel-hidden"
    data-mobile-items="1"
    data-tablet-items="2"
    data-items="2">
    {
      testimonialsToShow.map((testimonial) => {
        return <TestimonialItem testimonial={testimonial} />;
      })
    }
  </div>
</div>

<script is:inline>
  function loadScript(src, callback) {
    const script = document.createElement("script");
    script.src = src;
    script.onload = callback;
    document.head.appendChild(script);
  }

  function initTestimonials() {
    const initCarousel = () => {
      if (typeof jQuery !== "undefined") {
        const screenWidth = window.innerWidth;
        const itemsToShow = screenWidth >= 768 ? 2 : 1;
        const carousel = jQuery("#testimonials_1");

        if (!carousel.hasClass("owl-loaded")) {
          carousel.addClass("owl-carousel");
          carousel.owlCarousel({
            nav: false,
            items: itemsToShow,
            loop: true,
            navText: false,
            margin: 25,
            lazyLoad: true,
            responsive: {
              0: {items: 1},
              480: {items: 1},
              768: {items: 2},
              1200: {items: 2},
            },
          });
        }
        setupReadMoreLinks();
        // Reveal the carousel after initialization
        document.getElementById("testimonials_1").classList.remove("pre-carousel-hidden");
      }
    };

    const loadScriptsAndInit = () => {
      if (typeof jQuery === "undefined") {
        loadScript("/js/jquery-3.5.1.min.js", function () {
          loadScript("/js/owl.carousel.min.js", function () {
            initCarousel();
          });
        });
      } else if (typeof jQuery.fn.owlCarousel === "undefined") {
        loadScript("/js/owl.carousel.min.js", function () {
          initCarousel();
        });
      } else {
        initCarousel();
      }
    };

    // Delay script loading until the container is visible
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            observer.disconnect();
            // Add a delay to prioritize LCP rendering
            setTimeout(loadScriptsAndInit, 1000);
          }
        });
      },
      {threshold: 0.1},
    );

    const testimonials = document.querySelector(".testimonials-container");
    if (testimonials) {
      observer.observe(testimonials);
    }
  }

  // Defer initialization until after LCP
  if (document.readyState === "complete") {
    initTestimonials();
  } else {
    window.addEventListener("load", initTestimonials);
  }
  document.addEventListener("astro:page-load", initTestimonials);
  window.addEventListener("resize", function () {
    if (typeof jQuery !== "undefined" && typeof jQuery.fn.owlCarousel !== "undefined") {
      const carousel = jQuery("#testimonials_1");
      if (carousel.hasClass("owl-loaded")) {
        carousel.trigger("destroy.owl.carousel");
        initTestimonials();
      }
    }
  });

  function setupReadMoreLinks() {
    document.body.addEventListener("click", function (e) {
      const target = e.target;
      if (!target || !(target instanceof Element)) return;

      if (target.classList.contains("read-more-link")) {
        e.preventDefault();
        const testimonialText = target.closest(".testimonial-text");
        if (!testimonialText) return;
        const hiddenText = testimonialText.querySelector(".hidden-text");
        if (hiddenText && hiddenText instanceof HTMLElement) {
          hiddenText.style.display = "inline";
        }
        const readMoreContainer = testimonialText.querySelector(".read-more-container");
        if (readMoreContainer && readMoreContainer instanceof HTMLElement) {
          readMoreContainer.style.display = "none";
        }
        const showLessContainer = testimonialText.querySelector(".show-less-container");
        if (showLessContainer && showLessContainer instanceof HTMLElement) {
          showLessContainer.style.display = "inline";
        }
      }

      if (target.classList.contains("show-less-link")) {
        e.preventDefault();
        const testimonialText = target.closest(".testimonial-text");
        if (!testimonialText) return;
        const hiddenText = testimonialText.querySelector(".hidden-text");
        if (hiddenText && hiddenText instanceof HTMLElement) {
          hiddenText.style.display = "none";
        }
        const readMoreContainer = testimonialText.querySelector(".read-more-container");
        if (readMoreContainer && readMoreContainer instanceof HTMLElement) {
          readMoreContainer.style.display = "inline";
        }
        const showLessContainer = testimonialText.querySelector(".show-less-container");
        if (showLessContainer && showLessContainer instanceof HTMLElement) {
          showLessContainer.style.display = "none";
        }
      }
    });
  }
</script>
