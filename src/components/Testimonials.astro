---
import TestimonialItem from "./TestimonialItem.astro";
import LoadingIndicator from "./LoadingIndicator.astro";
import {testimonials} from "../data/testimonials";

interface Props {
  title?: string;
  subtitle?: string;
}

const {title = "Testimonials"} = Astro.props;
const testimonialsToShow = testimonials.filter((testimonial) => {
  return testimonial.visible !== false;
});
---

<link
  rel="preload"
  href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css"
  as="style"
  onload="this.onload=null;this.rel='stylesheet'"
/>
<noscript>
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/splide.min.css"
  />
</noscript>

<style is:global>
  .testimonials-nav-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background-color: var(--container-bg-color);
    color: var(--text-color);
    border: none;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
    margin-top: 30px;
  }

  .testimonials-nav-button:hover,
  .testimonials-nav-button:focus {
    background-color: var(--primary-color);
    color: white;
    outline: none;
  }

  .testimonials-nav-button:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  .testimonials-prev-button {
    left: -50px;
  }

  .testimonials-next-button {
    right: -50px;
  }

  .testimonials-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 50px;
    min-height: 200px;
  }

  .splide__track {
    cursor: grab;
  }

  .splide__track:active {
    cursor: grabbing;
  }

  @media (max-width: 768px) {
    .testimonials-nav-button {
      display: none;
    }
  }

  .testimonials-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
    width: 100%;
    position: relative;
    margin: 0 auto;
  }

  .testimonials-fade-in {
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
  }

  .testimonials-fade-in.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .splide__slide {
    width: 50%;
    box-sizing: border-box;
  }
  @media (max-width: 768px) {
    .splide__slide {
      width: 100%;
    }
  }

  .read-more-link,
  .show-less-link {
    color: #007bff;
    text-decoration: none;
    cursor: pointer;
    font-weight: 500;
    position: relative;
    z-index: 5;
  }

  .read-more-link:hover,
  .show-less-link:hover {
    color: #ff8c00;
    text-decoration: underline;
  }

  .testimonial-item {
    padding: 30px;
    margin-bottom: 10px;
  }

  .testimonial-content {
    position: relative;
    padding: 30px 20px 20px 60px;
    background-color: var(--container-bg-color);
    border-radius: var(--border-radius-md);
    border: 2px solid var(--border-color);
    transition: all 0.25s ease-in-out;
  }

  .testimonial-picture {
    position: absolute;
    display: block;
    top: -30px;
    left: -30px;
    width: 80px;
    height: 80px;
  }

  .testimonial-picture img {
    display: inline-block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
    border: 2px solid var(--border-color);
  }

  .testimonial-text p {
    font-style: italic;
    color: var(--text-color);
  }

  .testimonial-author-info {
    margin-top: 15px;
  }

  .testimonial-author {
    margin: 0 0 2px;
    font-size: 0.9em;
    color: var(--heading-color);
  }

  .testimonial-firm {
    margin: 0;
    font-size: 0.8em;
    color: var(--text-color);
    opacity: 0.8;
    line-height: 1.1em;
  }

  .quote-start,
  .quote-end {
    color: var(--border-color);
    opacity: 1;
    font-size: 18px;
    position: relative;
    margin: 0 2px;
    vertical-align: super;
    z-index: 1;
  }

  .quote-start {
    margin-right: 2px;
  }

  .quote-end {
    margin-left: 2px;
  }

  .splide__pagination {
    position: relative;
    width: 100%;
    text-align: center;
    bottom: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    margin: 15px auto 0;
  }

  .splide__pagination li {
    display: inline-block;
    margin: 3px 0;
  }

  .splide__pagination__container {
    width: 100%;
    display: flex;
    justify-content: center;
  }

  .splide__pagination__page {
    display: block;
    height: 3px;
    background-color: var(--pagination-color, white);
    border-radius: 3px;
    margin: 4px;
    width: 20px;
    transition:
      background-color 0.3s ease-in-out,
      width 0.3s ease-in-out;
    opacity: 1;
    border: none;
    padding: 0;
    box-shadow: none;
    transform: none;
  }

  .splide__pagination__page.is-active {
    background-color: var(--pagination-active-color, var(--secondary-color));
    width: 30px;
    transform: none;
    opacity: 1;
  }

  .splide__pagination__page:hover,
  .splide__pagination__page:focus {
    background-color: var(--pagination-hover-color, var(--primary-color));
    opacity: 1;
    transform: none;
    outline: none;
  }

  .splide__pagination__page:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  .splide__pagination button {
    padding: 0;
    border: none;
    background: var(--pagination-color, white);
  }

  html.theme-light .splide__pagination__page,
  html.theme-light .splide__pagination button {
    --pagination-color: #444;
    --pagination-active-color: var(--secondary-color);
    --pagination-hover-color: var(--primary-color);
  }

  html.theme-dark .splide__pagination__page,
  html.theme-dark .splide__pagination button {
    --pagination-color: white;
    --pagination-active-color: var(--secondary-color);
    --pagination-hover-color: var(--primary-color);
  }

  .pre-carousel-hidden {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  @media (max-width: 768px) {
    .testimonial-content {
      margin: 0 auto;
      max-width: 90%;
      padding: 30px 20px 20px 30px;
    }

    .testimonials-container {
      padding: 0 10px;
    }

    .testimonial-item {
      padding: 30px 30px 0 30px;
      margin-bottom: 0;
    }

    .splide__pagination {
      margin: 0;
      padding: 0 !important;
    }
  }
</style>

<div class="testimonials-container">
  <div class="block-title">
    <h2>{title}</h2>
  </div>

  <div class="testimonials-loading" id="testimonials_loading">
    <LoadingIndicator />
  </div>

  <div style="position: relative;">
    <button
      class="testimonials-nav-button testimonials-prev-button pre-carousel-hidden"
      id="testimonials_prev_button"
      aria-label="Previous testimonials"
      aria-controls="testimonials_1">
      <i class="fas fa-chevron-left" aria-hidden="true"></i>
    </button>
    <button
      class="testimonials-nav-button testimonials-next-button pre-carousel-hidden"
      id="testimonials_next_button"
      aria-label="Next testimonials"
      aria-controls="testimonials_1">
      <i class="fas fa-chevron-right" aria-hidden="true"></i>
    </button>

    <div
      class="splide pre-carousel-hidden testimonials-fade-in"
      id="testimonials_1"
      aria-label="Testimonials"
      aria-roledescription="carousel">
      <div class="splide__track">
        <ul class="splide__list">
          {
            testimonialsToShow.map((testimonial) => {
              return (
                <li class="splide__slide" role="group" aria-roledescription="slide">
                  <TestimonialItem testimonial={testimonial} />
                </li>
              );
            })
          }
        </ul>
      </div>
    </div>
  </div>

  <script is:inline>
    function loadScript(src, callback) {
      const script = document.createElement("script");
      script.src = src;
      script.onload = callback;
      document.head.appendChild(script);
    }

    function initTestimonials() {
      function updatePaginationColors() {
        const paginationButtons = document.querySelectorAll(".splide__pagination__page");
        if (!paginationButtons.length) return;

        const computedStyle = getComputedStyle(document.documentElement);
        const paginationColor =
          computedStyle.getPropertyValue("--pagination-color") ||
          (document.documentElement.classList.contains("theme-light") ? "#444" : "white");
        const activeColor =
          computedStyle.getPropertyValue("--pagination-active-color") ||
          computedStyle.getPropertyValue("--secondary-color") ||
          "#ff9800";

        paginationButtons.forEach((button) => {
          if (button.classList.contains("is-active")) {
            button.style.backgroundColor = activeColor;
          } else {
            button.style.backgroundColor = paginationColor;
          }
        });
      }

      document.addEventListener("themeChanged", updatePaginationColors);

      const initCarousel = () => {
        if (typeof Splide !== "undefined") {
          const splideElement = document.getElementById("testimonials_1");
          if (!splideElement) return;

          const totalItems = document.querySelectorAll(".splide__slide").length;
          const perPage = window.innerWidth >= 768 ? 2 : 1;

          const customPagination = function (splide, components, options) {
            const pages = Math.ceil(totalItems / perPage);

            const list = document.createElement("ul");
            list.classList.add("splide__pagination");

            for (let i = 0; i < pages; i++) {
              const li = document.createElement("li");
              const button = document.createElement("button");
              button.classList.add("splide__pagination__page");
              if (i === 0) button.classList.add("is-active");
              button.setAttribute("type", "button");
              button.setAttribute("aria-controls", `testimonials_1-slide${i * perPage}`);
              button.setAttribute("aria-label", `Show testimonials page ${i + 1} of ${pages}`);
              button.setAttribute("role", "tab");
              button.setAttribute("tabindex", i === 0 ? "0" : "-1");

              button.style.width = "20px";
              button.style.height = "3px";
              button.style.borderRadius = "3px";
              button.style.margin = "4px";
              button.style.transform = "none";
              button.style.transition = "background-color 0.3s ease-in-out, width 0.3s ease-in-out";

              const computedStyle = getComputedStyle(document.documentElement);
              const paginationColor =
                computedStyle.getPropertyValue("--pagination-color") ||
                (document.documentElement.classList.contains("theme-light") ? "#444" : "white");
              const activeColor =
                computedStyle.getPropertyValue("--pagination-active-color") ||
                computedStyle.getPropertyValue("--secondary-color") ||
                "#ff9800";

              button.style.backgroundColor = paginationColor;

              if (i === 0) {
                button.style.backgroundColor = activeColor;
                button.style.width = "30px";
              }

              button.addEventListener("click", () => {
                splide.go(i * perPage);
              });

              li.appendChild(button);
              list.appendChild(li);
            }

            const container = document.createElement("div");
            container.classList.add("splide__pagination__container");
            container.appendChild(list);

            components.Elements.track.parentNode.appendChild(container);

            list.addEventListener("keydown", (e) => {
              const buttons = Array.from(list.querySelectorAll("button"));
              const activeIndex = buttons.findIndex((btn) => btn.classList.contains("is-active"));

              if (e.key === "ArrowRight" || e.key === "ArrowDown") {
                e.preventDefault();
                const nextIndex = (activeIndex + 1) % buttons.length;
                splide.go(nextIndex * perPage);
                buttons[nextIndex].focus();
              } else if (e.key === "ArrowLeft" || e.key === "ArrowUp") {
                e.preventDefault();
                const prevIndex = (activeIndex - 1 + buttons.length) % buttons.length;
                splide.go(prevIndex * perPage);
                buttons[prevIndex].focus();
              }
            });

            splide.on("moved", (newIndex) => {
              const buttons = list.querySelectorAll("button");
              const pageIndex = Math.floor(newIndex / perPage);

              const computedStyle = getComputedStyle(document.documentElement);
              const paginationColor =
                computedStyle.getPropertyValue("--pagination-color") ||
                (document.documentElement.classList.contains("theme-light") ? "#444" : "white");
              const activeColor =
                computedStyle.getPropertyValue("--pagination-active-color") ||
                computedStyle.getPropertyValue("--secondary-color") ||
                "#ff9800";

              buttons.forEach((button, index) => {
                if (index === pageIndex) {
                  button.classList.add("is-active");
                  button.style.backgroundColor = activeColor;
                  button.style.width = "30px";
                  button.setAttribute("tabindex", "0");
                  button.setAttribute("aria-selected", "true");
                } else {
                  button.classList.remove("is-active");
                  button.style.backgroundColor = paginationColor;
                  button.style.width = "20px";
                  button.setAttribute("tabindex", "-1");
                  button.setAttribute("aria-selected", "false");
                }
              });
            });

            return {
              destroy: () => {
                if (container && container.parentNode) {
                  container.parentNode.removeChild(container);
                }
              },
            };
          };

          try {
            const splide = new Splide("#testimonials_1", {
              perPage: perPage,
              gap: 25,
              rewind: true,
              pagination: false,
              arrows: false,
              lazyLoad: true,
              speed: 250,
              easing: "ease-in-out",
              breakpoints: {
                768: {
                  perPage: 1,
                },
              },
            });

            splide.mount({CustomPagination: customPagination});

            const prevButton = document.getElementById("testimonials_prev_button");
            const nextButton = document.getElementById("testimonials_next_button");

            if (prevButton) {
              prevButton.addEventListener("click", () => {
                splide.go("<");
              });

              prevButton.addEventListener("keydown", (e) => {
                if (e.key === "Enter" || e.key === " ") {
                  e.preventDefault();
                  splide.go("<");
                }
              });
            }

            if (nextButton) {
              nextButton.addEventListener("click", () => {
                splide.go(">");
              });

              nextButton.addEventListener("keydown", (e) => {
                if (e.key === "Enter" || e.key === " ") {
                  e.preventDefault();
                  splide.go(">");
                }
              });
            }

            setTimeout(updatePaginationColors, 100);
          } catch (error) {}
          setupReadMoreLinks();

          const loadingElement = document.getElementById("testimonials_loading");
          if (loadingElement) {
            loadingElement.style.display = "none";
          }

          const testimonialElement = document.getElementById("testimonials_1");
          const prevButton = document.getElementById("testimonials_prev_button");
          const nextButton = document.getElementById("testimonials_next_button");

          if (testimonialElement) {
            testimonialElement.classList.remove("pre-carousel-hidden");
            void testimonialElement.offsetWidth;
            testimonialElement.classList.add("visible");
          }

          if (prevButton) {
            prevButton.classList.remove("pre-carousel-hidden");
          }

          if (nextButton) {
            nextButton.classList.remove("pre-carousel-hidden");
          }
        }
      };

      const loadSplideAndInit = () => {
        if (typeof Splide === "undefined") {
          loadScript(
            "https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js",
            function () {
              setTimeout(initCarousel, 100);
            },
          );
        } else {
          setTimeout(initCarousel, 100);
        }
      };

      const isMobile = window.innerWidth < 768;

      if (isMobile) {
        setTimeout(loadSplideAndInit, 300);
      } else {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                observer.disconnect();
                setTimeout(loadSplideAndInit, 500);
              }
            });
          },
          {
            threshold: 0.01,
            rootMargin: "300px 0px",
          },
        );

        const testimonials = document.querySelector(".testimonials-container");
        if (testimonials) {
          observer.observe(testimonials);
        }
      }
    }

    if (document.readyState === "complete") {
      initTestimonials();
    } else {
      window.addEventListener("load", initTestimonials);
    }
    document.addEventListener("astro:page-load", initTestimonials);
    window.addEventListener("resize", function () {
      if (typeof Splide !== "undefined") {
        const splideElement = document.getElementById("testimonials_1");
        if (splideElement) {
          const splideInstance = Splide.getInstance(splideElement);
          if (splideInstance) {
            splideInstance.destroy();
            initTestimonials();
          }
        }
      }
    });

    function setupReadMoreLinks() {
      document.body.addEventListener("click", function (e) {
        const target = e.target;
        if (!target || !(target instanceof Element)) return;

        if (target.classList.contains("read-more-link")) {
          e.preventDefault();
          const testimonialText = target.closest(".testimonial-text");
          if (!testimonialText) return;
          const hiddenText = testimonialText.querySelector(".hidden-text");
          if (hiddenText && hiddenText instanceof HTMLElement) {
            hiddenText.style.display = "inline";
          }
          const readMoreContainer = testimonialText.querySelector(".read-more-container");
          if (readMoreContainer && readMoreContainer instanceof HTMLElement) {
            readMoreContainer.style.display = "none";
          }
          const showLessContainer = testimonialText.querySelector(".show-less-container");
          if (showLessContainer && showLessContainer instanceof HTMLElement) {
            showLessContainer.style.display = "inline";
          }
        }

        if (target.classList.contains("show-less-link")) {
          e.preventDefault();
          const testimonialText = target.closest(".testimonial-text");
          if (!testimonialText) return;
          const hiddenText = testimonialText.querySelector(".hidden-text");
          if (hiddenText && hiddenText instanceof HTMLElement) {
            hiddenText.style.display = "none";
          }
          const readMoreContainer = testimonialText.querySelector(".read-more-container");
          if (readMoreContainer && readMoreContainer instanceof HTMLElement) {
            readMoreContainer.style.display = "inline";
          }
          const showLessContainer = testimonialText.querySelector(".show-less-container");
          if (showLessContainer && showLessContainer instanceof HTMLElement) {
            showLessContainer.style.display = "none";
          }
        }
      });
    }
  </script>
</div>
