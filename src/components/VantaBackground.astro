<div
  id="vanta-bg"
  style="width: 100vw; height: 100vh; position: absolute; top: 0; left: 0; z-index: -1;"
  data-vanta-background>
</div>

<script is:inline>
  // Defer loading of Vanta background to improve LCP
  const loadVantaBackground = () => {
    // Function to load a script dynamically with async attribute
    const loadScript = (src, isAsync = false) => {
      return new Promise((resolve, reject) => {
        const script = document.createElement("script");
        script.src = src;
        if (isAsync) script.async = true;
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    };

    // Store the effect globally to prevent recreation during transitions
    let vantaEffect = null;

    const initVantaEffect = () => {
      if (typeof VANTA === "undefined") return;

      const element = document.getElementById("vanta-bg");
      if (!element) {
        console.error("Background element not found");
        return;
      }

      const isLightTheme = document.documentElement.classList.contains("theme-light");

      // Reduce complexity on mobile
      const isMobile = window.innerWidth < 768;
      const spacing = isMobile ? 45.0 : 35.0;
      const scale = isMobile ? 0.8 : 1.0;

      // Destroy existing effect if it exists
      if (vantaEffect && typeof vantaEffect.destroy === "function") {
        vantaEffect.destroy();
        vantaEffect = null;
      }

      vantaEffect = VANTA.DOTS({
        el: element,
        mouseControls: true,
        touchControls: true,
        gyroControls: false,
        minHeight: 200.0,
        minWidth: 200.0,
        scale: scale,
        scaleMobile: scale,
        color: isLightTheme ? 0x333333 : 0xd5d5d5,
        backgroundColor: isLightTheme ? 0xf5f5f5 : 0x222222,
        size: 1.0,
        spacing: spacing,
        showLines: false,
      });
    };

    // Load scripts with improved non-blocking approach
    const loadVantaScripts = () => {
      // Check if three.js is already loaded (from preload)
      const threeJsLoaded = typeof THREE !== "undefined";

      // Create a chain of promises to ensure correct loading order
      const loadSequence = threeJsLoaded ? Promise.resolve() : loadScript("/js/three.min.js", true); // Load three.js asynchronously if not already loaded

      loadSequence
        .then(() => loadScript("/js/vanta.dots.min.js"))
        .then(() => {
          initVantaEffect();

          // Set up event listeners after scripts are loaded
          document.addEventListener("astro:page-load", initVantaEffect);
          document.addEventListener("themeChanged", initVantaEffect);
        })
        .catch((error) => {
          console.error("Failed to load Vanta scripts:", error);
        });
    };

    // Use requestIdleCallback to defer loading until after LCP
    if ("requestIdleCallback" in window) {
      requestIdleCallback(() => {
        loadVantaScripts();
      });
    } else {
      // Fallback for browsers that don't support requestIdleCallback
      setTimeout(loadVantaScripts, 2000); // Delay by 2 seconds to prioritize LCP
    }
  };

  // Wait for the page to be fully loaded before initializing Vanta
  if (document.readyState === "complete") {
    loadVantaBackground();
  } else {
    window.addEventListener("load", loadVantaBackground);
  }
</script>
