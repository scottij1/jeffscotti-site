---
// ImageGallery.astro - Component for displaying project image galleries
import type {ProjectImage} from "../data/projects";

interface Props {
  images: ProjectImage[];
  projectId: string;
}

const {images, projectId} = Astro.props;
---

<div class="image-gallery" id={`gallery-${projectId}`}>
  <div class="main-image-container">
    <button class="gallery-nav prev-image" aria-label="Previous image">
      <i class="fas fa-chevron-left"></i>
    </button>

    <div class="main-image">
      {
        images.map((image, index) => (
          <div class={`gallery-image ${index === 0 ? "active" : ""}`} data-index={index}>
            <img src={image.src} alt={image.alt} loading={index < 2 ? "eager" : "lazy"} />
            {image.caption && <div class="image-caption">{image.caption}</div>}
          </div>
        ))
      }
    </div>

    <button class="gallery-nav next-image" aria-label="Next image">
      <i class="fas fa-chevron-right"></i>
    </button>

    <div class="image-counter">
      <span class="current-index">1</span> / <span class="total-images">{images.length}</span>
    </div>
  </div>

  {
    images.length > 1 && (
      <div class="thumbnails-container">
        <div class="thumbnails-scroll">
          {images.map((image, index) => (
            <div
              class={`thumbnail ${index === 0 ? "active" : ""}`}
              data-index={index}
              title={image.caption || image.alt}>
              <img src={image.src} alt={`Thumbnail ${index + 1}`} loading="lazy" />
            </div>
          ))}
        </div>
      </div>
    )
  }
</div>

<style>
  .image-gallery {
    width: 100%;
    position: relative;
  }

  .main-image-container {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--container-bg-color);
    aspect-ratio: 16 / 9;
  }

  .main-image {
    width: 100%;
    height: 100%;
    position: relative;
  }

  .gallery-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.3s ease;
    display: none;
  }

  .gallery-image.active {
    opacity: 1;
    display: block;
  }

  .gallery-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
  }

  .image-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 10px 15px;
    font-size: 14px;
    text-align: center;
  }

  .gallery-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
    transition: background-color 0.3s ease;
  }

  .gallery-nav:hover {
    background-color: var(--primary-color);
  }

  .prev-image {
    left: 10px;
  }

  .next-image {
    right: 10px;
  }

  .image-counter {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    z-index: 2;
  }

  .thumbnails-container {
    margin-top: 15px;
    width: 100%;
    overflow-x: auto;
    scrollbar-width: thin;
  }

  .thumbnails-scroll {
    display: flex;
    gap: 10px;
    padding-bottom: 5px;
  }

  .thumbnail {
    flex: 0 0 80px;
    height: 60px;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    opacity: 0.6;
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
    border: 2px solid transparent;
  }

  .thumbnail:hover {
    opacity: 0.9;
    transform: translateY(-2px);
  }

  .thumbnail.active {
    opacity: 1;
    border-color: var(--primary-color);
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .thumbnails-container {
      margin-top: 10px;
    }

    .thumbnail {
      flex: 0 0 60px;
      height: 45px;
    }

    .gallery-nav {
      width: 36px;
      height: 36px;
    }
  }
</style>

<script is:inline define:vars={{projectId}}>
  document.addEventListener("DOMContentLoaded", () => {
    const galleryId = `gallery-${projectId}`;
    const gallery = document.getElementById(galleryId);

    if (!gallery) return;

    const images = gallery.querySelectorAll(".gallery-image");
    const thumbnails = gallery.querySelectorAll(".thumbnail");
    const prevButton = gallery.querySelector(".prev-image");
    const nextButton = gallery.querySelector(".next-image");
    const currentIndexEl = gallery.querySelector(".current-index");

    let currentIndex = 0;
    const totalImages = images.length;

    // Function to show a specific image
    function showImage(index) {
      // Hide all images
      images.forEach((image) => {
        image.classList.remove("active");
      });

      // Show the selected image
      images[index].classList.add("active");

      // Update thumbnails
      thumbnails.forEach((thumb) => {
        thumb.classList.remove("active");
      });

      if (thumbnails[index]) {
        thumbnails[index].classList.add("active");

        // Scroll thumbnail into view if needed
        const thumbsContainer = gallery.querySelector(".thumbnails-scroll");
        if (thumbsContainer) {
          const thumbLeft = thumbnails[index].offsetLeft;
          const containerWidth = thumbsContainer.clientWidth;
          const scrollLeft = thumbsContainer.scrollLeft;

          if (thumbLeft < scrollLeft || thumbLeft > scrollLeft + containerWidth - 80) {
            thumbsContainer.scrollTo({
              left: thumbLeft - containerWidth / 2 + 40,
              behavior: "smooth",
            });
          }
        }
      }

      // Update counter
      if (currentIndexEl) {
        currentIndexEl.textContent = index + 1;
      }

      // Update current index
      currentIndex = index;
    }

    // Navigate to previous image
    function prevImage() {
      const newIndex = (currentIndex - 1 + totalImages) % totalImages;
      showImage(newIndex);
    }

    // Navigate to next image
    function nextImage() {
      const newIndex = (currentIndex + 1) % totalImages;
      showImage(newIndex);
    }

    // Add event listeners
    if (prevButton) {
      prevButton.addEventListener("click", prevImage);
    }

    if (nextButton) {
      nextButton.addEventListener("click", nextImage);
    }

    // Add thumbnail click handlers
    thumbnails.forEach((thumb) => {
      thumb.addEventListener("click", () => {
        const index = parseInt(thumb.getAttribute("data-index") || "0", 10);
        showImage(index);
      });
    });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      // Only handle keyboard events if this gallery is visible
      const galleryElement = document.getElementById(galleryId);
      if (!galleryElement || getComputedStyle(galleryElement).display === "none") {
        return;
      }

      if (e.key === "ArrowLeft") {
        prevImage();
      } else if (e.key === "ArrowRight") {
        nextImage();
      }
    });

    // Preload adjacent images
    function preloadAdjacentImages(index) {
      const nextIndex = (index + 1) % totalImages;
      const prevIndex = (index - 1 + totalImages) % totalImages;

      const nextImage = images[nextIndex].querySelector("img");
      const prevImage = images[prevIndex].querySelector("img");

      if (nextImage && nextImage.getAttribute("loading") === "lazy") {
        nextImage.setAttribute("loading", "eager");
      }

      if (prevImage && prevImage.getAttribute("loading") === "lazy") {
        prevImage.setAttribute("loading", "eager");
      }
    }

    // Initialize with first image and preload adjacent images
    showImage(0);
    if (totalImages > 1) {
      preloadAdjacentImages(0);
    }
  });
</script>
