---
import type {ProjectImage} from "../data/projects";

interface Props {
  images: ProjectImage[];
  projectId: string;
}

const {images, projectId} = Astro.props;
---

<div class="image-gallery" id={`gallery-${projectId}`}>
  <div class="main-image-container">
    <button class="gallery-nav prev-image" aria-label="Previous image">
      <i class="fas fa-chevron-left"></i>
    </button>

    <div class="main-image">
      {
        images.map((image, index) => (
          <div class={`gallery-image ${index === 0 ? "active" : ""}`} data-index={index}>
            <img
              src={image.src}
              alt={image.alt}
              loading={index < 2 ? "eager" : "lazy"}
              class="zoomable-image"
            />
            {image.caption && (
              <div class="image-caption">
                {image.caption}
                {projectId === "project-async-wizard" && (
                  <a
                    href={image.src}
                    download
                    class="download-button"
                    title="Download high quality image">
                    <i class="fas fa-download" />
                    <span>High Quality</span>
                  </a>
                )}
              </div>
            )}
          </div>
        ))
      }
    </div>

    <button class="gallery-nav next-image" aria-label="Next image">
      <i class="fas fa-chevron-right"></i>
    </button>

    <div class="image-counter">
      <span class="current-index">1</span> / <span class="total-images">{images.length}</span>
    </div>
  </div>

  {
    images.length > 1 && (
      <div class="thumbnails-container">
        <div class="thumbnails-scroll">
          {images.map((image, index) => (
            <div
              class={`thumbnail ${index === 0 ? "active" : ""}`}
              data-index={index}
              title={image.caption || image.alt}>
              <img src={image.src} alt={`Thumbnail ${index + 1}`} loading="lazy" />
            </div>
          ))}
        </div>
      </div>
    )
  }
</div>

<style>
  .image-gallery {
    width: 100%;
    position: relative;
  }

  .main-image-container {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--container-bg-color);
    aspect-ratio: 16 / 9;
  }

  .main-image {
    width: 100%;
    height: 100%;
    position: relative;
  }

  .gallery-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.3s ease;
    display: none;
  }

  .gallery-image.active {
    opacity: 1;
    display: block;
  }

  .gallery-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    cursor: zoom-in;
  }

  .image-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 10px 15px;
    font-size: 14px;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .download-button {
    color: white;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    padding: 5px 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s ease;
    margin-left: 10px;
    text-decoration: none;
    font-size: 12px;
  }

  .download-button i {
    margin-right: 5px;
  }

  .download-button:hover {
    background-color: var(--primary-color);
  }

  .gallery-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
    transition: background-color 0.3s ease;
  }

  .gallery-nav:hover {
    background-color: var(--primary-color);
  }

  .prev-image {
    left: 10px;
  }

  .next-image {
    right: 10px;
  }

  .image-counter {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    z-index: 2;
  }

  .thumbnails-container {
    margin-top: 15px;
    width: 100%;
    overflow-x: auto;
    scrollbar-width: thin;
  }

  .thumbnails-scroll {
    display: flex;
    gap: 10px;
    padding-bottom: 5px;
  }

  .thumbnail {
    flex: 0 0 80px;
    height: 60px;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    opacity: 0.6;
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
    border: 2px solid transparent;
  }

  .thumbnail:hover {
    opacity: 0.9;
    transform: translateY(-2px);
  }

  .thumbnail.active {
    opacity: 1;
    border-color: var(--primary-color);
  }

  .thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .thumbnails-container {
      margin-top: 10px;
    }

    .thumbnail {
      flex: 0 0 60px;
      height: 45px;
    }

    .gallery-nav {
      width: 36px;
      height: 36px;
    }

    .download-button span {
      display: none;
    }

    .download-button {
      width: 30px;
      height: 30px;
      padding: 0;
      border-radius: 50%;
    }

    .download-button i {
      margin-right: 0;
    }
  }
</style>

<script is:inline define:vars={{projectId, images}}>
  function initializeGallery() {
    const galleryId = `gallery-${projectId}`;
    const gallery = document.getElementById(galleryId);
    if (!gallery) {
      return false;
    }

    const galleryImages = gallery.querySelectorAll(".gallery-image");
    const thumbnails = gallery.querySelectorAll(".thumbnail");
    const prevButton = gallery.querySelector(".prev-image");
    const nextButton = gallery.querySelector(".next-image");
    const currentIndexEl = gallery.querySelector(".current-index");
    const zoomableImages = gallery.querySelectorAll(".zoomable-image");
    const totalImages = galleryImages.length;
    let galleryIndex = 0;

    function showImage(index) {
      galleryImages.forEach((img) => {
        img.classList.remove("active");
      });

      if (galleryImages[index]) {
        galleryImages[index].classList.add("active");
      }

      thumbnails.forEach((thumb) => {
        thumb.classList.remove("active");
      });

      if (thumbnails[index]) {
        thumbnails[index].classList.add("active");
        // Scroll thumbnail into view if needed
        const thumbsContainer = gallery.querySelector(".thumbnails-scroll");
        if (thumbsContainer) {
          const thumbLeft = thumbnails[index].offsetLeft;
          const containerWidth = thumbsContainer.clientWidth;
          const scrollLeft = thumbsContainer.scrollLeft;
          if (thumbLeft < scrollLeft || thumbLeft > scrollLeft + containerWidth - 80) {
            thumbsContainer.scrollTo({
              left: thumbLeft - containerWidth / 2 + 40,
              behavior: "smooth",
            });
          }
        }
      }

      if (currentIndexEl) {
        currentIndexEl.textContent = index + 1;
      }
      galleryIndex = index;
    }

    function prevImage() {
      const newIndex = (galleryIndex - 1 + totalImages) % totalImages;
      showImage(newIndex);
    }

    function nextImage() {
      const newIndex = (galleryIndex + 1) % totalImages;
      showImage(newIndex);
    }

    if (prevButton) {
      prevButton.addEventListener("click", prevImage);
    }

    if (nextButton) {
      nextButton.addEventListener("click", nextImage);
    }

    thumbnails.forEach((thumb) => {
      thumb.addEventListener("click", () => {
        const index = parseInt(thumb.getAttribute("data-index") || "0", 10);
        showImage(index);
      });
    });

    document.addEventListener("keydown", (e) => {
      const galleryElement = document.getElementById(galleryId);
      if (!galleryElement || getComputedStyle(galleryElement).display === "none") {
        return;
      }

      if (e.key === "ArrowLeft") {
        prevImage();
      } else if (e.key === "ArrowRight") {
        nextImage();
      }
    });

    function preloadAdjacentImages(index) {
      const nextIndex = (index + 1) % totalImages;
      const prevIndex = (index - 1 + totalImages) % totalImages;
      const nextImg = galleryImages[nextIndex].querySelector("img");
      const prevImg = galleryImages[prevIndex].querySelector("img");

      if (nextImg && nextImg.getAttribute("loading") === "lazy") {
        nextImg.setAttribute("loading", "eager");
      }

      if (prevImg && prevImg.getAttribute("loading") === "lazy") {
        prevImg.setAttribute("loading", "eager");
      }
    }

    showImage(0);
    if (totalImages > 1) {
      preloadAdjacentImages(0);
    }

    const modalId = `fullsize-modal-${projectId}`;

    // This function waits until the modal element is available
    function initModal() {
      const modal = document.getElementById(modalId);
      if (!modal) {
        // Increase timeout and retry count to ensure modal is found
        setTimeout(initModal, 100);
        return;
      }

      let modalIndex = 0;
      const modalContainer = modal.querySelector(".fullsize-image-container");
      const modalPrevButton = modal.querySelector(".prev-image");
      const modalNextButton = modal.querySelector(".next-image");
      const modalCloseButton = modal.querySelector(".close-modal");
      const modalCurrentIndexEl = modal.querySelector(".current-index");
      const modalTotalImagesEl = modal.querySelector(".total-images");
      const modalCaptionEl = modal.querySelector(".image-caption");

      if (modalTotalImagesEl) {
        modalTotalImagesEl.textContent = totalImages;
      }

      // Build modal images and thumbnails
      if (modalContainer) {
        modalContainer.innerHTML = "";
        const modalThumbnailsContainer = modal.querySelector(".modal-thumbnails-container");
        if (modalThumbnailsContainer) {
          modalThumbnailsContainer.innerHTML = "";
        }

        modalContainer.innerHTML = "";

        images.forEach((image, i) => {
          const imageDiv = document.createElement("div");
          imageDiv.className = "modal-fullsize-image fullsize-image";
          imageDiv.setAttribute("data-index", i);
          imageDiv.style.position = "absolute";
          imageDiv.style.top = "0";
          imageDiv.style.left = "0";
          imageDiv.style.width = "100%";
          imageDiv.style.height = "100%";
          imageDiv.style.opacity = "0";
          imageDiv.style.display = "none";
          imageDiv.style.zIndex = "1";

          if (i === 0) {
            imageDiv.classList.add("active");
            imageDiv.style.opacity = "1";
            imageDiv.style.display = "block";
            imageDiv.style.zIndex = "2";
          }

          const img = document.createElement("img");
          img.src = image.src;
          img.alt = image.alt || `Image ${i + 1}`;
          img.style.position = "absolute";
          img.style.top = "50%";
          img.style.left = "50%";
          img.style.transform = "translate(-50%, -50%)";
          img.style.maxWidth = "100%";
          img.style.maxHeight = "100%";
          img.style.objectFit = "contain";

          imageDiv.appendChild(img);
          modalContainer.appendChild(imageDiv);

          if (modalThumbnailsContainer) {
            // Apply styles to the thumbnails container if not already applied
            if (!modalThumbnailsContainer.style.display) {
              modalThumbnailsContainer.style.display = "flex";
              modalThumbnailsContainer.style.justifyContent = "center";
              modalThumbnailsContainer.style.gap = "10px";
              modalThumbnailsContainer.style.padding = "10px 0";
              modalThumbnailsContainer.style.overflowX = "auto";
              modalThumbnailsContainer.style.maxWidth = "100%";
            }

            const thumbnail = document.createElement("div");
            thumbnail.className = "modal-thumbnail";
            if (i === 0) {
              thumbnail.classList.add("active");
            }
            thumbnail.setAttribute("data-index", i);

            // Apply styles directly to the thumbnail
            thumbnail.style.width = "60px";
            thumbnail.style.height = "45px";
            thumbnail.style.borderRadius = "4px";
            thumbnail.style.overflow = "hidden";
            thumbnail.style.cursor = "pointer";
            thumbnail.style.opacity = i === 0 ? "1" : "0.6";
            thumbnail.style.transition = "all 0.3s ease";
            thumbnail.style.border = i === 0 ? "2px solid white" : "2px solid transparent";

            const thumbImg = document.createElement("img");
            thumbImg.src = image.src;
            thumbImg.alt = `Thumbnail ${i + 1}`;
            thumbImg.style.width = "100%";
            thumbImg.style.height = "100%";
            thumbImg.style.objectFit = "cover";

            thumbnail.appendChild(thumbImg);
            modalThumbnailsContainer.appendChild(thumbnail);

            thumbnail.addEventListener("click", (e) => {
              e.preventDefault();
              e.stopPropagation();
              showModalImage(i);
            });

            thumbnail.addEventListener("mouseenter", () => {
              if (!thumbnail.classList.contains("active")) {
                thumbnail.style.opacity = "0.9";
                thumbnail.style.transform = "translateY(-2px)";
              }
            });

            thumbnail.addEventListener("mouseleave", () => {
              if (!thumbnail.classList.contains("active")) {
                thumbnail.style.opacity = "0.6";
                thumbnail.style.transform = "";
              }
            });
          }
        });
      }

      function showModalImage(index) {
        const modalImages = modal.querySelectorAll(".fullsize-image");
        const modalThumbnails = modal.querySelectorAll(".modal-thumbnail");
        if (modalImages.length === 0) {
          return;
        }

        modalImages.forEach((img) => {
          img.classList.remove("active");
          img.style.opacity = "0";
          img.style.display = "none";
          img.style.zIndex = "1";
        });

        modalThumbnails.forEach((thumb) => {
          thumb.classList.remove("active");
          thumb.style.opacity = "0.6";
          thumb.style.border = "2px solid transparent";
        });

        if (modalImages[index]) {
          modalImages[index].classList.add("active");
          modalImages[index].style.opacity = "1";
          modalImages[index].style.display = "block";
          modalImages[index].style.zIndex = "2";
        }

        if (modalThumbnails[index]) {
          modalThumbnails[index].classList.add("active");
          modalThumbnails[index].style.opacity = "1";
          modalThumbnails[index].style.border = "2px solid white";
        }

        if (modalCurrentIndexEl) {
          modalCurrentIndexEl.textContent = index + 1;
        }

        if (modalCaptionEl) {
          modalCaptionEl.textContent = images[index]?.caption || "";
        }

        const downloadButtonContainer = modal.querySelector(
          `#download-button-container-${projectId}`,
        );
        if (downloadButtonContainer) {
          downloadButtonContainer.innerHTML = "";

          if (
            projectId === "project-async-wizard" ||
            projectId === "project-async-wizard-desktop"
          ) {
            const downloadButton = document.createElement("a");
            downloadButton.href = images[index].src;
            downloadButton.download = "";
            downloadButton.className = "download-button";
            downloadButton.title = "Download high quality image";
            downloadButton.innerHTML = '<i class="fas fa-download"></i><span>High Quality</span>';
            downloadButtonContainer.appendChild(downloadButton);
          }
        }

        modalIndex = index;
      }

      function prevModalImage() {
        const newIndex = (modalIndex - 1 + totalImages) % totalImages;
        showModalImage(newIndex);
      }

      function nextModalImage() {
        const newIndex = (modalIndex + 1) % totalImages;
        showModalImage(newIndex);
      }

      function openModal(index) {
        showModalImage(index);
        modal.classList.add("open");
        document.body.style.overflow = "hidden";
        document.addEventListener("keydown", handleModalKeydown);
      }

      function closeModal() {
        modal.classList.remove("open");
        document.body.style.overflow = "";
        document.removeEventListener("keydown", handleModalKeydown);
      }

      function handleModalKeydown(e) {
        if (e.key === "ArrowLeft") {
          prevModalImage();
        } else if (e.key === "ArrowRight") {
          nextModalImage();
        } else if (e.key === "Escape") {
          closeModal();
        }
      }

      if (modalPrevButton) {
        modalPrevButton.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          prevModalImage();
        });
      }

      if (modalNextButton) {
        modalNextButton.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          nextModalImage();
        });
      }

      if (modalCloseButton) {
        modalCloseButton.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          closeModal();
        });
      }

      zoomableImages.forEach((img) => {
        img.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          const galleryImage = img.closest(".gallery-image");
          if (galleryImage) {
            const index = parseInt(galleryImage.getAttribute("data-index") || "0", 10);
            openModal(index);
          }
        });

        img.style.cursor = "zoom-in";
      });
    }

    // Initialize the modal (waits until its element exists)
    initModal();

    return true;
  }

  document.addEventListener("DOMContentLoaded", function () {
    initializeGallery();
  });

  document.addEventListener("astro:page-load", function () {
    initializeGallery();
  });

  document.addEventListener("astro:after-swap", function () {
    initializeGallery();
  });

  if (document.readyState === "complete" || document.readyState === "interactive") {
    setTimeout(initializeGallery, 0);
  }
</script>
