---
// ProjectView.astro - Sliding project view component
import ImageGallery from "./ImageGallery.astro";
import FullSizeImageModal from "./FullSizeImageModal.astro";
import {projects, getProjectById} from "../data/projects";
---

<div id="project-view" class="project-view">
  <div class="project-view-wrapper">
    <div class="project-view-nav">
      <div class="nav-item project-view-prev-next">
        <button id="prev-project" class="nav-button" aria-label="Previous Project">
          <i class="fas fa-chevron-left"></i>
        </button>
        <button id="next-project" class="nav-button" aria-label="Next Project">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
      <div class="nav-item project-view-close-button">
        <button id="project-view-close-button" class="nav-button" aria-label="Close Project View">
          <i class="fas fa-times"></i>
        </button>
      </div>
    </div>

    <div class="project-view-content">
      <!-- Project content will be loaded here dynamically -->
      {
        projects.map((project) => (
          <div id={project.id} class="project-content" style="display: none;">
            <div class="project-view-title">
              <h2>{project.title}</h2>
              <div class="project-view-subtitle">{project.subtitle}</div>
            </div>

            <div class="project-view-body">
              <div class="project-view-gallery">
                <ImageGallery images={project.images} projectId={project.id} />
              </div>

              <div class="project-view-details">
                <div class="project-description">
                  <h3>Description</h3>
                  {project.description.map((paragraph) => (
                    <p>{paragraph}</p>
                  ))}
                </div>

                <div class="project-technologies">
                  <h3>Technologies</h3>
                  <ul class="tech-tags">
                    {project.technologies.map((tech) => (
                      <li>{tech}</li>
                    ))}
                  </ul>
                </div>

                <div class="project-role">
                  <h3>My Role</h3>
                  <p>{project.role}</p>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  {/* Add full-size image modal for each project */}
  {projects.map((project) => <FullSizeImageModal projectId={project.id} />)}
</div>

<style>
  .project-view {
    position: fixed;
    top: 0;
    right: -100%;
    width: 100%;
    height: 100%;
    background-color: var(--background-color);
    z-index: 1000;
    overflow-y: auto;
    transition: transform 0.5s ease-in-out;
    box-shadow: -5px 0 15px rgba(0, 0, 0, 0.2);
  }

  .project-view.open {
    transform: translateX(-100%);
  }

  .project-view-wrapper {
    padding: 30px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .project-view-nav {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
  }

  .nav-item {
    display: flex;
    gap: 15px;
  }

  .nav-button {
    background: none;
    border: none;
    color: var(--text-color);
    font-size: 18px;
    cursor: pointer;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .nav-button:hover {
    background-color: var(--primary-color);
    color: white;
  }

  .project-view-title {
    margin-bottom: 30px;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 20px;
  }

  .project-view-title h2 {
    font-size: 28px;
    margin: 0 0 10px 0;
    color: var(--heading-color);
  }

  .project-view-subtitle {
    font-size: 16px;
    color: var(--text-color);
    opacity: 0.8;
  }

  .project-view-body {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 30px;
  }

  .project-view-gallery {
    border-radius: 8px;
    overflow: hidden;
  }

  .project-view-details {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .project-view-details h3 {
    font-size: 18px;
    margin: 0 0 15px 0;
    color: var(--heading-color);
  }

  .project-view-details p {
    margin: 0 0 15px 0;
    line-height: 1.6;
  }

  .tech-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tech-tags li {
    background-color: var(--container-bg-color);
    color: var(--text-color);
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 12px;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .project-view-body {
      grid-template-columns: 1fr;
    }

    .project-view-wrapper {
      padding: 20px;
    }
  }
</style>

<script is:inline define:vars={{projectIds: projects.map((p) => p.id)}}>
  window.initProjectView = function () {
    const projectView = document.getElementById("project-view");
    if (!projectView) {
      console.error("Project view element not found");
      return;
    }

    const closeButton = document.getElementById("project-view-close-button");
    const prevButton = document.getElementById("prev-project");
    const nextButton = document.getElementById("next-project");
    const projectContents = document.querySelectorAll(".project-content");

    let currentProjectIndex = 0;

    // Listen for theme changes
    document.addEventListener("themeChanged", (event) => {
      console.log("Theme changed in ProjectView:", event.detail.theme);
    });

    // Function to show a specific project
    function showProject(projectId) {
      // Hide all projects first
      projectContents.forEach((content) => {
        content.style.display = "none";
      });

      // Show the selected project
      const projectToShow = document.getElementById(projectId);
      if (projectToShow) {
        projectToShow.style.display = "block";

        // Update current index
        currentProjectIndex = projectIds.indexOf(projectId);
      }
    }

    // Close the project view
    function closeProjectView() {
      projectView.classList.remove("open");
      document.body.style.overflow = "";
    }

    // Open the project view with a specific project
    function openProjectView(projectId) {
      showProject(projectId);
      projectView.classList.add("open");
      document.body.style.overflow = "hidden"; // Prevent scrolling of the main page
    }

    // Navigate to previous project
    function goToPrevProject() {
      currentProjectIndex = (currentProjectIndex - 1 + projectIds.length) % projectIds.length;
      showProject(projectIds[currentProjectIndex]);
    }

    // Navigate to next project
    function goToNextProject() {
      currentProjectIndex = (currentProjectIndex + 1) % projectIds.length;
      showProject(projectIds[currentProjectIndex]);
    }

    // Event listeners
    if (closeButton) {
      closeButton.addEventListener("click", closeProjectView);
    }

    if (prevButton) {
      prevButton.addEventListener("click", goToPrevProject);
    }

    if (nextButton) {
      nextButton.addEventListener("click", goToNextProject);
    }

    // Expose functions to window for external access
    window.openProjectView = openProjectView;
    window.closeProjectView = closeProjectView;

    // Handle escape key to close
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && projectView.classList.contains("open")) {
        closeProjectView();
      }
    });
  };

  document.addEventListener("DOMContentLoaded", window.initProjectView);
  document.addEventListener("astro:page-load", window.initProjectView);
</script>
