---
// ProjectView.astro - Sliding project view component
import ImageGallery from "./ImageGallery.astro";
import ProjectTabbedGallery from "./ProjectTabbedGallery.astro";
import FullSizeImageModal from "./FullSizeImageModal.astro";
import {projects, getProjectById, automatedCfeBillMobileImages} from "../data/projects";
---

<div id="project-view" class="project-view">
  <div class="project-view-wrapper">
    <div class="project-view-nav">
      <div class="nav-item project-view-prev-next">
        <button id="prev-project" class="nav-button" aria-label="Previous Project">
          <i class="fas fa-chevron-left"></i>
        </button>
        <button id="next-project" class="nav-button" aria-label="Next Project">
          <i class="fas fa-chevron-right"></i>
        </button>
      </div>
      <div class="nav-item project-view-close-button">
        <button id="project-view-close-button" class="nav-button" aria-label="Close Project View">
          <i class="fas fa-times"></i>
        </button>
      </div>
    </div>

    <div class="project-view-content">
      <!-- Project content will be loaded here dynamically -->
      {
        projects.map((project) => (
          <div id={project.id} class="project-content" style="display: none;">
            <div class="project-view-title">
              <h2>{project.title}</h2>
              <div class="project-view-subtitle">{project.subtitle}</div>
            </div>

            <div class="project-view-gallery">
              {project.id === "project-automated-cfe-bill" ? (
                <ProjectTabbedGallery
                  desktopImages={project.images}
                  mobileImages={automatedCfeBillMobileImages}
                  projectId={project.id}
                  pdfUrl="/images/portfolio/bright/automated_cfe_bill/process_and_vision.pdf"
                  defaultTab="desktop"
                />
              ) : project.id === "project-biocom-site" ? (
                <ProjectTabbedGallery
                  desktopImages={project.images}
                  mobileImages={[]}
                  projectId={project.id}
                  pdfUrl="/images/portfolio/biocom/biocom.org/site-map.pdf"
                  defaultTab="desktop"
                />
              ) : project.id === "project-async-wizard" ? (
                <ProjectTabbedGallery
                  desktopImages={project.images}
                  mobileImages={[]}
                  projectId={project.id}
                  pdfUrl="/images/portfolio/bright/async_wizard_ux_flow/async-wizard-documents-upload-flow.pdf"
                  defaultTab="pdf"
                />
              ) : (
                <ImageGallery images={project.images} projectId={project.id} />
              )}
            </div>

            <div class="project-view-body">
              <div class="project-view-details">
                <div class="project-description">
                  <h3>Description</h3>
                  {project.description.map((paragraph) => (
                    <p>{paragraph}</p>
                  ))}
                </div>

                <div class="project-technologies">
                  <h3>Technologies</h3>
                  <ul class="tech-tags">
                    {project.technologies.map((tech) => (
                      <li>{tech}</li>
                    ))}
                  </ul>
                </div>

                <div class="project-role">
                  <h3>My Role</h3>
                  <ul class="role-tags">
                    {project.rolePositions.map((position) => (
                      <li>{position}</li>
                    ))}
                  </ul>
                </div>

                {project.liveUrl && (
                  <div class="project-live-version">
                    <h3>Live Version</h3>
                    <div class="live-site-link">
                      <a
                        href={project.liveUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="view-live-button">
                        View
                      </a>
                    </div>
                  </div>
                )}
              </div>

              <div class="project-process-vision">
                <h3>Process & Vision</h3>
                {project.processVision.split("\n\n").map((paragraph: string) => (
                  <p set:html={paragraph} />
                ))}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
  {
    projects.map((project) => (
      <>
        <FullSizeImageModal projectId={project.id} />
        <FullSizeImageModal projectId={`${project.id}-desktop`} />
        <FullSizeImageModal projectId={`${project.id}-mobile`} />
      </>
    ))
  }
</div>

<style>
  .project-view {
    position: fixed;
    top: 0;
    right: -100%;
    width: 100%;
    height: 100%;
    background-color: var(--background-color);
    z-index: 1000;
    overflow-y: auto;
    transition: transform 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    box-shadow: -5px 0 15px rgba(0, 0, 0, 0.2);
  }

  .project-view.open {
    transform: translateX(-100%);
  }

  .project-view-wrapper {
    padding: 30px;
    max-width: 1200px;
    margin: 0 auto;
  }

  .project-view-nav {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
  }

  .nav-item {
    display: flex;
    gap: 15px;
  }

  .nav-button {
    background: none;
    border: none;
    color: var(--text-color);
    font-size: 18px;
    cursor: pointer;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .nav-button:hover {
    background-color: var(--primary-color);
    color: white;
  }

  .project-view-title {
    margin-bottom: 30px;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 20px;
  }

  .project-view-title h2 {
    font-size: 28px;
    margin: 0 0 10px 0;
    color: var(--heading-color);
  }

  .project-view-subtitle {
    font-size: 16px;
    color: var(--text-color);
    opacity: 0.8;
  }

  .project-view-gallery {
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 30px;
    width: 100%;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 30px;
  }

  .project-view-body {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
  }

  .project-view-details {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .project-view-details h3 {
    font-size: 18px;
    margin: 0 0 15px 0;
    color: var(--heading-color);
  }

  .project-view-details p {
    margin: 0 0 15px 0;
    line-height: 1.6;
  }

  .tech-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tech-tags li,
  .role-tags li {
    background-color: var(--container-bg-color);
    color: var(--text-color);
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 12px;
  }

  .role-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    list-style: none;
    padding: 0;
    margin: 0 0 15px 0;
  }

  .live-site-link {
    margin-top: 20px;
  }

  .view-live-button {
    display: inline-block;
    position: relative;
    padding: 0.8em 1.5em;
    margin-bottom: 0.15em;
    margin-right: 0.25em;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.2;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    cursor: pointer;
    border-radius: 1.875rem; /* 30px */
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    text-decoration: none;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--button-text-color);
    border: 0.125rem solid var(--primary-color);
    background-color: var(--primary-color);
    font-family: var(--font-family);
    overflow: hidden;
    z-index: 1;
  }

  .view-live-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--button-hover-bg-color);
    transform: translateX(-100%);
    transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    z-index: -1;
  }

  .view-live-button:hover {
    color: var(--button-hover-text-color);
    border-color: var(--button-hover-bg-color);
  }

  .view-live-button:hover::before {
    transform: translateX(0);
  }
  
  .view-live-button:active {
    color: var(--button-hover-text-color);
    background-color: var(--button-hover-bg-color);
    border-color: var(--button-hover-bg-color);
  }

  .project-process-vision {
    padding-left: 20px;
  }

  .project-process-vision h3 {
    font-size: 18px;
    margin: 0 0 15px 0;
    color: var(--heading-color);
  }

  .project-process-vision p {
    margin: 0 0 15px 0;
    line-height: 1.6;
  }

  @media (max-width: 768px) {
    .project-view-body {
      grid-template-columns: 1fr;
    }

    .project-view-wrapper {
      padding: 20px;
    }

    .project-process-vision {
      padding-left: 0;
      margin-top: 30px;
    }
  }
</style>

<script is:inline define:vars={{projectIds: projects.map((p) => p.id)}}>
  function initializeProjectView() {
    const projectView = document.getElementById("project-view");
    if (!projectView) {
      console.error("Project view element not found");
      return false;
    }

    const closeButton = document.getElementById("project-view-close-button");
    const prevButton = document.getElementById("prev-project");
    const nextButton = document.getElementById("next-project");
    const projectContents = document.querySelectorAll(".project-content");

    let currentProjectIndex = 0;

    document.addEventListener("themeChanged", (event) => {
      console.log("Theme changed in ProjectView:", event.detail.theme);
    });

    function showProject(projectId) {
      projectContents.forEach((content) => {
        content.style.display = "none";
      });

      const projectToShow = document.getElementById(projectId);
      if (projectToShow) {
        projectToShow.style.display = "block";
        const newIndex = projectIds.indexOf(projectId);

        if (newIndex !== -1) {
          currentProjectIndex = newIndex;
        } else {
          console.error("Project ID not found in projectIds array:", projectId);
        }
      } else {
        console.error("Project element not found with ID:", projectId);
      }
    }

    function closeProjectView() {
      projectView.classList.remove("open");
      document.body.style.overflow = "";
    }

    function openProjectView(projectId) {
      showProject(projectId);
      projectView.classList.add("open");
      document.body.style.overflow = "hidden";
      
      setTimeout(() => {
        const containers = document.querySelectorAll(".tabbed-gallery-container");
        containers.forEach((container) => {
          const projectContainer = container.closest(".project-content");
          if (projectContainer && projectContainer.id === projectId) {
            const tabLinks = container.querySelectorAll(".tab-btn");
            const tabContents = container.querySelectorAll(".tab-content");
            const tabItems = container.querySelectorAll(".tab-buttons li");
            const defaultTab = container.getAttribute("data-default-tab") || "desktop";
            const defaultTabId = `${projectId}-${defaultTab}-tab`;
            const defaultTabContent = document.getElementById(defaultTabId);
            
            if (defaultTabContent) {
              tabItems.forEach((item) => item.classList.remove("active"));
              tabContents.forEach((content) => content.classList.remove("active"));
              
              const defaultTabButton = container.querySelector(`[data-tab="${defaultTabId}"]`);
              if (defaultTabButton) {
                const parentLi = defaultTabButton.closest("li");
                if (parentLi) {
                  parentLi.classList.add("active");
                }
              }
              
               defaultTabContent.classList.add("active");
            }
          }
        });
      }, 100);
    }

    function goToPrevProject() {
      currentProjectIndex = (currentProjectIndex - 1 + projectIds.length) % projectIds.length;
      const projectId = projectIds[currentProjectIndex];
      showProject(projectId);
      
      // Reinitialize tabs for the new project
      setTimeout(() => {
        const containers = document.querySelectorAll(".tabbed-gallery-container");
        containers.forEach((container) => {
          const projectContainer = container.closest(".project-content");
          if (projectContainer && projectContainer.id === projectId) {
            const tabLinks = container.querySelectorAll(".tab-btn");
            const tabContents = container.querySelectorAll(".tab-content");
            const tabItems = container.querySelectorAll(".tab-buttons li");
            const defaultTab = container.getAttribute("data-default-tab") || "desktop";
            const defaultTabId = `${projectId}-${defaultTab}-tab`;
            const defaultTabContent = document.getElementById(defaultTabId);
            
            if (defaultTabContent) {
              tabItems.forEach((item) => item.classList.remove("active"));
              tabContents.forEach((content) => content.classList.remove("active"));
              
              const defaultTabButton = container.querySelector(`[data-tab="${defaultTabId}"]`);
              if (defaultTabButton) {
                const parentLi = defaultTabButton.closest("li");
                if (parentLi) {
                  parentLi.classList.add("active");
                }
              }
              
              defaultTabContent.classList.add("active");
            }
          }
        });
      }, 100);
    }

    function goToNextProject() {
      currentProjectIndex = (currentProjectIndex + 1) % projectIds.length;
      const projectId = projectIds[currentProjectIndex];
      showProject(projectId);
      
      // Reinitialize tabs for the new project
      setTimeout(() => {
        const containers = document.querySelectorAll(".tabbed-gallery-container");
        containers.forEach((container) => {
          const projectContainer = container.closest(".project-content");
          if (projectContainer && projectContainer.id === projectId) {
            const tabLinks = container.querySelectorAll(".tab-btn");
            const tabContents = container.querySelectorAll(".tab-content");
            const tabItems = container.querySelectorAll(".tab-buttons li");
            const defaultTab = container.getAttribute("data-default-tab") || "desktop";
            const defaultTabId = `${projectId}-${defaultTab}-tab`;
            const defaultTabContent = document.getElementById(defaultTabId);
            
            if (defaultTabContent) {
              tabItems.forEach((item) => item.classList.remove("active"));
              tabContents.forEach((content) => content.classList.remove("active"));
              
              const defaultTabButton = container.querySelector(`[data-tab="${defaultTabId}"]`);
              if (defaultTabButton) {
                const parentLi = defaultTabButton.closest("li");
                if (parentLi) {
                  parentLi.classList.add("active");
                }
              }
              
              defaultTabContent.classList.add("active");
            }
          }
        });
      }, 100);
    }

    if (closeButton) {
      closeButton.addEventListener("click", closeProjectView);
    }

    if (prevButton) {
      prevButton.addEventListener("click", goToPrevProject);
    }

    if (nextButton) {
      nextButton.addEventListener("click", goToNextProject);
    }

    window.openProjectView = openProjectView;
    window.closeProjectView = closeProjectView;
    window.goToPrevProject = goToPrevProject;
    window.goToNextProject = goToNextProject;

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && projectView.classList.contains("open")) {
        closeProjectView();
      }
    });

    return true;
  }

  window.initProjectView = function () {
    return initializeProjectView();
  };

  document.addEventListener("DOMContentLoaded", function () {
    initializeProjectView();
  });

  document.addEventListener("astro:page-load", function () {
    initializeProjectView();
  });

  if (document.readyState === "complete" || document.readyState === "interactive") {
    setTimeout(initializeProjectView, 0);
  }
</script>
